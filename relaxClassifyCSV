#!/usr/bin/env ruby

require 'optparse'
require 'Newick'
require 'ostruct'
require 'csv'
require 'ApisDB'

opt = OpenStruct.new
opt.all = false
opt.storage = "misc_apis"
ApisDB.loadOptions(opt)

ARGV.options do |o|
  o.banner << " [dataset .. dataset..]"
  o.on("-a", "--all", "include all datasets in database") {|t| opt.all = true}
  o.on("-d ", "--database ", String, 
       "protein database to use (default #{opt.database})") {|d| opt.database = d}
  o.on("-h ", "--host ", String, "database host (default #{opt.host})") {|t| opt.host = t}
  o.on("-s ", "--storage ", String, "storage database (default #{opt.storage})") {|t| opt.storage = t}
  begin
    o.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts o
    exit(1)
  end
  if (ARGV.size < 1 && !opt.all)
    STDERR.puts o
    exit(1)
  end
end

db = ApisDB.new(opt.host + "/" + opt.storage)

inList = "("
if (opt.all)
  db.query("SELECT dataset FROM dataset").each do |row|
    inList += ("'" + row.first.quote + "',")
  end
elsif ARGV.first.index("%")
  wild = ARGV.pop
  db.query("SELECT dataset FROM dataset WHERE dataset like '#{wild}'").each do |row|
    inList += ("'" + row.first.quote + "',")
  end
else
  ARGV.each do |dset|
    inList += ("'" + dset.quote + "',")
  end
end

inList.chop!
inList += ")"


out = Hash.new

header = ["Seq"]
header.push("Dataset")
header.push("Absolute Classification", "Majority Classification")
print header.to_csv

STDERR << "Counting Trees...\n"
trees = db.query("SELECT seq_name, dataset, tree FROM tree WHERE dataset IN #{inList}")
tnum = trees.num_rows
STDERR << "Processing Trees....\n"
count = 0
trees.each do |row|
  seq_name, dataset, tree = row
  begin
    tree = NewickTree.new(tree)
    abscl = tree.createClassification(seq_name, db.tax, nil, false)
    majcl = tree.createClassification(seq_name, db.tax, nil, true)
    print [seq_name, dataset, abscl, majcl].to_csv
    count += 1
    STDERR.printf("%4.2f%% done...\n", count*100.0/tnum) if (count % 1000 == 0)
  rescue
    STDERR << "Problem processing " << seq_name << ":" << $! << "\n"
  end
end
