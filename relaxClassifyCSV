#!/usr/bin/env ruby

require 'optparse'
require 'dm-core'
require 'Newick'
require 'ostruct'
require 'csv'
require 'ComboDB'
require 'ComboDB-metadata'
require 'ApisDB'

opts = OpenStruct.new

opts.all = false
opts.host = "mysql://access:access@mysql-lan-pro"
opts.storage = "misc_apis"
opts.proteindb = "phylodb"


ARGV.options {|o|
  o.banner << " [dataset .. dataset..]"
  o.on("-a", "--all", "include all datasets in database") {|t| opts.all = true}
  o.on("-h ", "--host ", String, "database host (default #{opts.host})") {|t| opts.host = t}
  o.on("-s ", "--storage ", String, "storage database (default #{opts.storage})") {|t| opts.storage = t}
  begin
    o.parse!
  rescue
    STDERR.puts $!.message
    STDERR.puts o
    exit(1)
  end
  if (ARGV.size < 1 && !opts.all)
    STDERR.puts o
    exit(1)
  end
}

DataMapper.setup(:default, opts.host + "/" + opts.storage)
DataMapper.setup(:combodb, opts.host + "/" + opts.proteindb)

inList = "("
if (opts.all)
  Dataset.all.each do |dset|
    inList += ("'" + dset.id + "',")
  end
elsif ARGV.first.index("%")
  wild = ARGV.pop
  Dataset.all(:id.like => wild).each do |dset|
    inList += ("'" + dset.id + "',")
  end
else
  ARGV.each do |dset|
    inList += ("'" + dset + "',")
  end
end

inList.chop!
inList += ")"


out = Hash.new

header = ["Seq"]
header.push("Dataset")
header.push("Absolute Classification", "Majority Classification")
print header.to_csv

STDERR << "Loading Taxonomy...\n"
tax = repository(:combodb){Contig.tax}
STDERR << "Counting Trees...\n"
trees = repository(:default).adapter.select("SELECT seq_name, dataset, tree FROM tree WHERE dataset IN #{inList}")
tnum = trees.size
STDERR << "Processing Trees....\n"
count = 0
trees.each do |row|
  begin
    tree = NewickTree.new(row.tree)
    abscl = tree.createClassification(row.seq_name, tax, nil, false)
    majcl = tree.createClassification(row.seq_name, tax, nil, true)
    print [row.seq_name, row.dataset, abscl, majcl].to_csv
    count += 1
    STDERR.printf("%4.2f%% done...\n", count*100.0/tnum) if (count % 1000 == 0)
  rescue
    STDERR << "Problem processing " << row.seq_name << ":" << $! << "\n"
  end
end
