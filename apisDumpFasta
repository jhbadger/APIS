#!/usr/bin/env ruby

require 'optparse'
require 'dm-core'
require 'ApisDB'
require 'ostruct'

$VERBOSE = nil
opt = OpenStruct.new
opt.all = false
opt.f = false
opt.v = false
opt.storage = "misc_apis"
opt.host = "mysql://access:access@mysql-lan-pro"
opt.split = false
opt.tax = nil
opt.ann = false
opt.taxonomy = nil

o = OptionParser.new
o.banner << " [dataset...dataset]"
o.on("-a", "--all", "dump all datasets") {opt.all = true}
o.on("-f ", "--file ", String, 
        "read list of ids to search from file") {|f| opt.f = f}   
o.on("-v", "--inverse", "return lines not matching expression") {opt.v = true}
o.on("-s ", "--storage ", String, "storage database (default #{opt.storage})") {|s| opt.storage = s}
o.on("-t ", "--taxonomy ", String, "only print with matching taxonomy") {|t| opt.taxonomy = t}
o.on("-h ", "--host ", String, "database host (default #{opt.host})") {|h| opt.host = h}
o.on("-x", "--split", "make separate file for each dataset") {opt.split = true}
o.on("-z", "--annotation", "include annotation") {opt.ann = true}

begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 1 && !opt.all)
  STDERR << o
  exit(1)
end

DataMapper.setup(:default, opt.host + "/" + opt.storage)

if (opt.all)
  Dataset.all.each do |dataset|
    ARGV.push(dataset.id)
  end
end

seen = Hash.new  
if (opt.f)
  File.new(opt.f).each {|line|
    seen[line.chomp] = true
  }
end

ARGV.each do |dataset|
  if (opt.split)
    out = File.new(dataset + ".pep", "w")
  else
    out = STDOUT
  end
  Sequence.all(:dataset_id => dataset).each do |seq|
    print = true
    print = false if (opt.f && opt.v && seen[seq.name])
    print = false if (opt.f && !opt.v && !seen[seq.name])
    if (opt.taxonomy)
      tax = seq.classification.to_s
      print = false if tax !~/#{opt.taxonomy}/i
      print = !print if (opt.v) && tax != ""
    end
    if (print)
      header = seq.name
      if (opt.ann)
        ann = seq.annotations.first(:source => "APIS")
        header += " " + ann.annotation if (ann)
      end
      out.print ">#{header}\n#{seq.sequence.gsub("*","").gsub(Regexp.new(".{1,60}"), "\\0\n")}"
    end
  end
  out.close if (opt.split)
end
