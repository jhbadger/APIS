#!/usr/bin/env ruby

require 'rubygems'
require 'dm-core'
require 'bio'
require 'BlastReport'
require 'ostruct'
require 'optparse'
require 'ApisDB'
require 'ZFile'

opt = OpenStruct.new
o = OptionParser.new

opt.database = "phylodb"
opt.storage = "misc_apis"
opt.host = "mysql://apis:apis_user@mysql-lan-pro"

o.banner << " pep-file blast-file "
o.on("-d ", "--database ", String, "protein database (default #{opt.database})") {|t| opt.database = t}
o.on("-s ", "--storage ", String, "storage database (default #{opt.storage})") {|t| opt.storage = t}
o.on("-h ", "--host ", String, "database host (default #{opt.host})") {|t| opt.host = t}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size != 2)
  STDERR << o
  exit(1)
end

pep, blast = ARGV

DataMapper.setup(:default, opt.host + "/" + opt.storage)

dataset_id = File.basename(blast.split(".").first)
dataset = Dataset.first(:id => dataset_id)

if (dataset.nil?)
  STDERR << "Creating Dataset...\n"
  dataset = Dataset.create(:id => dataset_id, :owner => ENV["USER"], 
    :date_added=>Date.today, :database_used=>opt.database, :comments => "")
  STDERR << "Loading seqs...\n"
  Bio::FlatFile.new(Bio::FastaFormat, ZFile.new(pep)).each do |seq|
    Sequence.create(:name => seq.entry_id, :dataset => dataset, :sequence => seq.seq, 
      :processed => 0)
  end
end

count = 0
BlastReport.new(blast).each do |query|
  count += 1
  STDERR << "Processing Query #{count}...\n" if (count % 1000 == 0)
  query.each do |hit|
    hname = hit.name.gsub(opt.database + "||", "")
    b = Blast.create(:dataset_id=>dataset.id, :seq_name => query.name,
      :subject_name=>hname,:subject_description=>hit.description, 
      :subject_length=>hit.slen,:query_start=>hit.qstart, :query_end=>hit.qend,
      :subject_start=>hit.sstart, :subject_end=>hit.send,
      :identity=>hit.identity, :similarity=>hit.similarity,
      :score=>hit.score, :evalue=> hit.evalue)
  end
end