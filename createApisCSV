#!/usr/bin/env ruby

# createApisCSV is a script for generating reports from an existing APIS run, or sets of runs. This output can be in the 
# form of csv file(s) or tab delimited file(s). By default, the sequence name, dataset, seq length, annotation, 
# classification, and NCBI tax id of the classification are reported, but other fields, such as bootstrap value and the
# "relaxed" classification can be included

require 'optparse'
require 'dm-core'
require 'Newick'
require 'ostruct'
require 'csv'
require 'ComboDB'
require 'ApisDB'

opt = OpenStruct.new

opt.all = false
opt.host = "mysql://access:access@mysql-lan-pro"
opt.storage = "misc_apis"
opt.proteindb = "phylodb"
opt.tree = false
opt.boot = false
opt.cut = false
opt.delim = false
opt.exp = false
opt.file = false
opt.schmidt = false
opt.relax = false
opt.limit = false

ARGV.options {|o|
  o.banner << " [dataset .. dataset..]"
  o.on("-a", "--all", "include all datasets in database (#{opt.all})") {opt.all = true}
  o.on("-b", "--bootstrap", "include bootstrap value (#{opt.boot})") {|t| opt.boot = t}
  o.on("-c", "--cut", "separate file per dataset (#{opt.cut})") {opt.cut = true}
  o.on("-d", "--delim-tab", "use tab delimiter (#{opt.delim})") {opt.delim = true}
  o.on("-e ", "--expression ", String, "include datasets matching substring") {|t| opt.exp = t}
  o.on("-f ", "--file ", String, "only include ids from file") {|t| opt.file = t}
  o.on("-h ", "--host ", String, "database host (#{opt.host})") {|t| opt.host = t}
  o.on("-l ", "--limit ", Integer, "number of records to limit to") {|t| opt.limit = t}
  o.on("-p ", "--proteindb ", String, "protein database (default #{opt.proteindb})") {|t| opt.proteindb = t}
  o.on("-r", "--relax", "relaxed classification (#{opt.relax})") {opt.relax = true}
  o.on("-s ", "--storage ", String, "storage database (default #{opt.storage})") {|t| opt.storage = t}
  o.on("-t", "--tree", "include tree in file (#{opt.tree})") {|t| opt.tree = t}
  o.on("-z", "--filtered", "only include schmidt filtered (#{opt.schmidt})") {opt.schmidt = true}
  begin
    o.parse!
  rescue
    STDERR << $!.message << "\n"
    STDERR << o 
    exit(1)
  end
  if (ARGV.size < 1 && (!opt.all && !opt.exp))
    STDERR << o
    exit(1)
  end
}

DataMapper.setup(:default, opt.host + "/" + opt.storage)
DataMapper.setup(:combodb, opt.host + "/" + opt.proteindb)

if (opt.all || opt.exp)
  repository(:default).adapter.select("select dataset from dataset").each do |dataset|
    ARGV.push(dataset) if (!opt.exp || dataset =~/#{opt.exp}/)
  end
end


if (opt.delim)
  opt.delim = "\t"
else
  opt.delim = ","
end

out = Hash.new

datasets = ARGV


if (!datasets.empty?)
  header = ["Seq Name", "Dataset", "Length", "Annotation", "Standard Classification", "Standard Tax Id"]
  header.push("Relaxed Classification", "Relaxed Tax Id") if opt.relax
  header.push("Bootstrap") if (opt.boot)
  header.push("Tree") if (opt.tree)

  if (opt.tree || opt.relax)
    STDERR << "Loading Taxonomy...\n"
    taxdb = repository(:combodb){Contig.tax}
  else
    taxdb = nil
  end

  def summarizeClass(tax)
    t = ""
    tid = nil
    goodRank = ""
    tax.each do |rank|
      if (rank !="Undefined" && !rank.nil?)
        t += "; " if t != ""
        t += rank
        break if rank == "Mixed"
      end
      goodRank = rank
    end
    t = "NO_TREE" if t == ""
    if (goodRank != "")
      tid = repository(:combodb).adapter.select("select ncbi_taxon_id from phylodb_annotation.taxon, phylodb_annotation.taxon_name " + 
        "where name = '#{goodRank}' and phylodb_annotation.taxon.taxon_id = phylodb_annotation.taxon_name .taxon_id limit 1").first
    end
    return t, tid
  end


  inClause = ""

  if (opt.file)
    inClause = "("
    STDERR << "Loading file of ids...\n"
    File.new(opt.file).each do |line|
      id, rest = line.chomp.split(" ")
      inClause += "'" + id + "'," if (!id.nil?)
    end
    inClause.chop!
    inClause += ")"
  end

  query = "SELECT count(*) FROM sequence WHERE dataset in ('#{datasets.join('\',\'')}')"
  query += " AND sequence.seq_name IN #{inClause}" if (inClause != "")
  STDERR << "Counting sequences...\n"
  num = repository(:default).adapter.select(query).first
  milestone = num / 200.0

  file = STDOUT
  file << header.to_csv({:col_sep=>opt.delim}) if (!opt.cut)
  ext = ".csv"
  ext = ".tab" if (opt.delim)
  count = 0
  STDERR << "Writing Spreadsheet...\n"

  datasets.each do |dataset|
    if (opt.cut)
      file.close if file != STDOUT
      file = File.new(dataset + ext, "w")
      file << header.to_csv({:col_sep=>opt.delim})
    end
    query =  "SELECT sequence.seq_name, sequence.dataset, length(sequence), annotation, "
    query += "kingdom, phylum, class, ord, family, genus, species, tree"
    query += " FROM sequence "
    query += "LEFT JOIN classification ON classification.seq_name = sequence.seq_name "
    query += "AND sequence.dataset = classification.dataset " 
    query += "LEFT JOIN tree ON tree.seq_name = sequence.seq_name "
    query += "AND sequence.dataset = tree.dataset " 
    query += "LEFT JOIN annotation ON annotation.seq_name = sequence.seq_name "
    query += "AND sequence.dataset = annotation.dataset and annotation.source='APIS' "
    query += " LEFT JOIN schmidt_filtered ON schmidt_filtered.seq_name = sequence.seq_name " if (opt.schmidt)
    query += "WHERE sequence.dataset='#{dataset}'"
    query += " AND filtered = 1 " if (opt.schmidt)
    query += " AND sequence.seq_name IN #{inClause}" if (inClause != "")
    query += " LIMIT #{opt.limit}" if (opt.limit)
  
    repository(:default).adapter.select(query).each do |row|
      list = row.to_a
      tree = list.pop
      begin
        newick = NewickTree.new(tree) if (!tree.nil? && (opt.boot || opt.relax))
      rescue
        newick = nil
      end
      tax, tid = summarizeClass(list[4..10])
      if (opt.relax)
        if (tree.nil? || newick.nil?)
          rtax = ""
          rtid = nil
        else
          relax = newick.createClassification(list[0], taxdb, nil, true)
          rtax, rtid = summarizeClass(relax)
        end
        list[4..10] = [tax, tid, rtax, rtid]
      else
        list[4..10] = [tax, tid]
      end
      if (opt.boot)
        if (tree.nil? || newick.nil?)
          list.push(nil)
        else
          list.push(newick.findNode(row[0]).parent.name)
        end
      end
      list.push(tree) if (opt.tree)
      file << list.to_csv({:col_sep=>opt.delim})
      count += 1
      STDERR << ((count*1000)/num)/10.0 << "% completed...\n" if (count % milestone == 0)
      row = nil
      list = nil
    end
  end
  file.close if file != STDOUT
end