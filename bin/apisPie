#!/usr/bin/env ruby

$VERBOSE=nil
VER = "2.01"
DATE = "04/19/2013"

$:.unshift File.dirname(File.expand_path($0)).gsub("bin", "lib") # include lib directory in load path

require 'rubygems'
require 'trollop'
require 'gchart'
require 'ZFile'
require 'csv'
require 'yajl'
require 'apis_lib'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
   banner File.basename($0) << " " << VER << " " << DATE
   opt :input, "input apis.json file(s) to use", :required=>true, :type=>:strings
   opt :level, "taxonomic level", :default=> "phylum", :type => :string
   opt :relaxed, "use relaxed rather than strict consensus"
   opt :with_tree, "only count cases with tree"
end

Trollop::die :no_such_rank unless ["kingdom","phylum","class","order","family","genus","species"].include?(opts.level)

percents = Hash.new

opts.input.each do |dataset|
   STDERR.printf("Processing %s...\n", dataset)
   counts = Hash.new
   total = 0
   JsonStreamer.new(ZFile.new(dataset)).each do |obj|
      if (opts.relaxed)
         consensus = obj["relaxed_consensus"]
      else
         consensus = obj["strict_consensus"]
      end
      taxon = consensus[opts.level]
      if taxon != "Undefined" && (!opts.with_tree || taxon != "NO_TREE")
         counts[taxon] = 0 if !counts[taxon]
         counts[taxon] += 1
         total += 1
      end
   end

   percents[dataset] = Hash.new
   counts["Misc"] = 0
   percents[dataset]["Misc"] = 0

   counts.keys.each do |key|
      percents[dataset][key] = 100*counts[key]/total.to_f
   end

   counts.keys.each do |key|
      if (percents[dataset][key] < 2 && key != "Misc")
         percents[dataset]["Misc"] += percents[dataset][key]
         counts.delete(key)
         percents[dataset].delete(key)
      end
   end
   percents[dataset].delete("Misc") if (percents[dataset]["Misc"] < 2)
end

colors = ["#90B8C0","#988CA0","#FF9999","#99FF99","#CE0000",
   "#000063","#5A79A5","#9CAAC6","#DEE7EF","#84596B",
   "#B58AA5","#CECFCE","#005B9A","#0191C8","#74C2E1",
   "#8C8984","#E8D0A9","#B7AFA3","#727B84","#DF9496",
   "#00008B", "#0000CD", "#0000FF", "#006400", "#008000",
   "#008000", "#008080", "#008B8B", "#00BFFF", "#00CED1",
   "#F5FFFA", "#F8F8FF", "#FA8072" "#FAEBD7", "#FAF0E6",
"#FAFAD2", "#000063","#5A79A5","#9CAAC6","#DEE7EF","#84596B"]

colors *= 5 # provide duplicates of colors to stop running out

taxa = Hash.new
percents.keys.sort.each do |dataset|
   percents[dataset].keys.each do |taxon|
      taxa[taxon] = 0 if taxa[taxon].nil?
      taxa[taxon] += percents[dataset][taxon]
   end
end

colorTaxa = Hash.new
taxa.keys.sort {|x,y| taxa[y] <=> taxa[x]}.each do |taxon|
   colorTaxa[taxon] = colors.shift if (colors.size > 0)
end

radius = 50
x = radius*2
y = radius*2
num = 0

printf("<center><H1>#{opts.level.capitalize} level breakdown</H1></center><BR>\n")
percents.keys.sort.each do |dataset|
   legend = percents[dataset].keys
   data = legend.collect{|x| percents[dataset][x].round(1)}
   glegend = legend.dup
   if (opts.num)
      legend.size.times do |i|
         glegend[i] = legend[i] + " " + ((100*data[i]).to_i/100.0).to_s + "%"
      end
   end
   dname = File.basename(dataset).split("_classification").first
   url = Gchart.pie(:data => data, :legend => glegend, :width=>500, :title => dname)
   col = ""
   legend.each do |key|
      col += colorTaxa[key].downcase.gsub("#","") + ","
   end
   col.chop!
   printf("<img src=\"%s&chco=%s\"/>\n\n", url, col)
end
