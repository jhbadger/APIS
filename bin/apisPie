#!/usr/bin/env ruby

$VERBOSE=nil
VER = "2.07"
DATE = "03/19/2014"

$:.unshift File.dirname(File.expand_path($0)).gsub("bin", "lib") # include lib directory in load path

require 'trollop'
require 'gchart'
require 'ZFile'
require 'csv'
require 'yajl'
require 'apis_lib'

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0) << " " << VER << " " << DATE
  opt :input, "input apis.json file(s) to use", :required=>true, :type=>:strings
  opt :columns, "columns of pies", :default=>3
  opt :expression, "use regexp to parse dataset name", :type=>:string
  opt :levels, "phylogenetic levels to run", :default=>["kingdom","phylum","class","order","family","genus","species"]
  opt :format, "json or tab", :default=>"json"
  opt :relaxed, "use relaxed rather than strict consensus"
  opt :num, "include numbers on pie"
  opt :miscmin, "minimum percentage to get slice of pie", :default=>5.0
  opt :with_tree, "only count cases with tree"
  opt :excel, "Output excel spreadsheet to file", :type=>:string
end

Trollop::die :illegal_format unless opts.format == "json" || opts.format=="tab"

counts = Hash.new
opts.levels.each do |level|
  percents = Hash.new
  taxa = Hash.new
  counts[level] = Hash.new
  opts.input.each do |file|
    if opts.expression && file =~/#{opts.expression}/
      dataset = File.basename($1)
    else
      dataset = File.basename(file)
    end
    STDERR.printf("Processing %s for %s...\n", level.capitalize, dataset)
    percents[dataset], counts[level][dataset] = pieProcess(file, dataset, opts.format, level, 
                          opts.with_tree)
    percents[dataset] = collectMisc(percents[dataset], level, opts.miscmin)
    percents[dataset].keys.each do |taxon|
      taxa[taxon] = 0 if taxa[taxon].nil?
      taxa[taxon] += percents[dataset][taxon]
    end
  end  
  
  colorTaxa = getPieColors(taxa)

  printf("<center><H1>#{level.capitalize} level breakdown</H1></center><BR>\n")
  printf("<TABLE>\n")
  n = 0
  percents.keys.sort.each do |dataset|
    printf("</TR>\n")if n % opts.columns == 0 && n > 0
    printf("<TR>\n")if n % opts.columns == 0     
    legend = percents[dataset].keys
    data = legend.collect{|x| percents[dataset][x].round(1)}
    glegend = legend.dup
    if opts.num
      legend.size.times do |i|
        glegend[i] = legend[i] + " " + ((100*data[i]).to_i/100.0).to_s + "%"
      end
    end
    dname = File.basename(dataset).split("_classification").first
    url = Gchart.pie(:data => data, :legend => glegend, :width=>500, :title => dname)
    col = ""
    legend.each do |key|
      col += colorTaxa[key].downcase.gsub("#","") + ","
    end
    col.chop!
    printf("<TD><img src=\"%s&chco=%s\"/></TD>\n\n", url, col)
    n += 1
  end
  printf("</TR></TABLE>\n")
end

writeCountsExcel(opts.excel, counts) if opts.excel

