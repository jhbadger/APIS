#!/usr/bin/env ruby

$VERBOSE=nil
VER = "2.50"
DATE = "12/19/2013"

require 'bio'
require 'trollop'
require 'Newick'
require 'ostruct'
require 'fpdf'
require 'yajl'

$:.unshift File.dirname(File.expand_path($0)).gsub("bin", "lib") # include lib directory in load path

require "apis_lib"
require "SGE"
require "ZFile"

# load apis_conf.json defaults from current, home, or APIS directory
defaults = loadDefaults

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
   banner File.basename($0) << " " << VER << " " << DATE
   opt :blasts, "NCBI Blast tab file(s) with seguids", :required =>true, :type => :strings
   opt :databases, "Seguid-based fastacmd indexed protein database", :type => :strings, :default=>[defaults["database"]]
   opt :evalue, "maximum evalue for blast hit to be counted", :default=>1e-9, :type => :float
   opt :exclude, "taxa to exclude in classification", :type => :strings
   opt :input, "protein input fasta file to process", :required => true, :type => :string
   opt :annotate, "Provide phylogenomic annotation"
   opt :maxhits, "Maximum blast hits per query sequence", :default=>50, :type => :integer
   opt :taxonomies, "APIS usedTaxa file(s)", :type => :strings, :default=>[defaults["taxonomy"]]
   opt :trees, "create pdf-formatted versions of trees in specified directory", :type => :string
   opt :project, "SGE grid project number", :type => :string
   opt :queue, "SGE grid queue if running on grid", :type => :string, :default => "medium"
   opt :phylo, "Phylogenetic method", :default=>"nj", :type => :string
   opt :erase, "erase input peptide file upon success"
   opt :tmp, "set temporary directory", :default=>Dir.getwd + "/tmp", :type=>:string
   opt :scan, "scan to first blast hit with peptide"
   opt :verbose, "print verbose status messages to STDERR"
end

if !opts.databases.first || !opts.taxonomies.first
   STDERR << "Both a database and taxonomy need to be specified\n"
   exit(1)
end

if (opts.trees)
   STDERR << "Writing trees to " << opts.trees << "...\n" if opts.verbose
   Dir.mkdir(opts.trees) if !File.exists?(opts.trees)
end

if opts.input =~/\.[0-9]/
   dataset = opts.input
else
   dataset = File.basename(opts.input).split(".").first
end

Dir.mkdir(opts.tmp) if !File.exists?(opts.tmp)

if (opts.blasts.size > 1) # merge multiple blast files
   blast = mergeBlasts(opts.blasts, dataset, opts)
else
   blast = opts.blasts.first
end

if (opts.project)
   runGridApis(opts, dataset, blast)
else
   taxonomy, tax_ids = loadTaxonomy(opts.taxonomies, opts.verbose)

   if File.exists?(dataset + "_apis.json")
      STDERR << "APIS data already exists for " << dataset << "\n"
      exit(1)
   end

   afas = File.new(dataset + "_afa.json", "w")
   out = File.new(dataset + "_apis.json", "w")
   error = File.new(dataset + "_error.json", "w")
   peps = Bio::FlatFile.new(Bio::FastaFormat, ZFile.new(opts.input))

   # main loop
   blastHits = BlastHits.new(blast)
   if (opts.scan) # in grid job, jump to start
      bpid, blastLines = scanBlast(blastHits, opts.input)
   else
      bpid, blastLines = blastHits.next
   end

   emptyAPIS = {"kingdom" => "NO_TREE", "phylum" => "NO_TREE", "class" => "NO_TREE",
   "order" => "NO_TREE", "family" => "NO_TREE", "genus" => "NO_TREE", "species" => "NO_TREE"}
   peps.each do |pep|
      begin
         tree, classy, boot, ann, staxid, stax, rtaxid, rtax  = "NO_TREE",
         {"strict" => emptyAPIS, "relaxed" => emptyAPIS}, nil,nil,nil,nil,nil,nil
         pid = pep.full_id
         if bpid == pid && blastLines.size > 2 # 3 homologs + query is min tree
            afa, functHash = align(pep, blastLines, opts.databases, opts.tmp, opts.verbose)
            tree = infer(pid, afa, opts.phylo, opts.verbose)
            if tree
               boot = tree.findNode(pid).parent.name
               classy = tree.classify(pid, opts.exclude, taxonomy)
               staxid, stax = findBestTaxId(classy["strict"], tax_ids)
               rtaxid, rtax = findBestTaxId(classy["relaxed"], tax_ids)
               ann = tree.annotate(pid, functHash) if opts.annotate
               afas << {"name" => pid, "alignment" => File.read(afa)}.to_json_pp
               if (opts.trees)
                  NewickTree.new(tree).draw(opts.trees + "/" + name + ".pdf", boot="width", linker = :segLink)
               end
               File.unlink(afa)
            end
         end
         outHash = {"name" => pid, "tree"=>tree.to_s, "strict_consensus"=>classy["strict"],
         "relaxed_consensus"=>classy["relaxed"]}
         outHash["strict_taxon_id"] = staxid.to_i if staxid
         outHash["strict_taxon"] = stax if stax
         outHash["relaxed_taxon_id"] = rtaxid.to_i if rtaxid
         outHash["relaxed_taxon"] = rtax if rtax
         outHash["bootstrap"] = boot.to_i if boot if boot.to_i > 0
         outHash["annotation"] = ann if ann
         out << outHash.to_json_pp
      rescue => detail
         STDERR << "Error " << detail.message << ": " << detail.backtrace  << "while processing #{pid}. Skipping peptide...\n" if opts.verbose
         error << {"name" => pid, "error" => detail.message, "backtrace" => detail.backtrace}.to_json_pp
      end
      bpid, blastLines = blastHits.next if bpid == pid # only skip ahead if peptide & blast match
   end
   # close files & cleanup
   afas.close
   out.close
   error.close
   peps.close
   File.unlink(opts.input) if opts.erase
end

