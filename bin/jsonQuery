#!/usr/bin/env ruby

$VERBOSE=nil
VER = "1.2"
DATE = "03/13/2015"

require 'ostruct'
require 'trollop'
require 'yajl'
$:.unshift File.dirname(File.expand_path($0)).gsub("bin", "lib") # include lib directory in load path

require "apis_lib"
require "ZFile"

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0) << " " << VER << " " << DATE
  opt :input, "read from file(s) rather than STDIN", :type => :strings
  opt :query, "query on JSON obj (e.g. \"[this.name] if this.strict_consensus.kingdom=='Bacteria'\")", :type=> :string
  opt :output, "output format (tab, json)", :type => :string, :default => "tab"
  opt :apistab, "report apis tab file"
  opt :separate, "write separate files rather than to STDOUT"
  opt :tree, "include tree in apis tab"
  
end

Trollop::die :no_such_format unless ["tab", "json"].include?(opts.output)

if opts.apistab
  query = "[this.name, this.relaxed_taxon, this.relaxed_taxon_id, this.annotation, this.relaxed_consensus.kingdom, this.relaxed_consensus.phylum, this.relaxed_consensus.class_name, this.relaxed_consensus.order, this.relaxed_consensus.family, this.relaxed_consensus.genus, this.relaxed_consensus.species, this.bootstrap"
  query += ",this.tree" if opts.tree
  query += "]"
  output = "tab"
  headers = ["Name", "Taxon", "Taxon_id", "Annotation", "Kingdom", "Phylum",
             "Class", "Order", "Family", "Genus", "Species", "Bootstrap"]
  headers.push("Tree") if opts.tree
else
  query=opts.query
  output = opts.output
  headers = nil
end

if !query
  STDERR << "Either a quety or apistab needs to be specified"
  exit(1)
end

if opts.input
  inputs = opts.input
else
  inputs = [STDIN]
end

class OpenStruct
  def recurseToHash
    out = self.marshal_dump
    out.keys.each do |key|
      out[key] = out[key].recurseToHash if out[key].class==OpenStruct
    end
    out
  end
end


inputs.each do |input|
  inputf = STDIN
  inputf = ZFile.new(input) if input != STDIN
  if opts.separate
    outfile = File.new(File.basename(input).split(/.ali|.pep|.faa/).first + "." + output, "w")
    STDERR << "Processing " << File.basename(input) << "...\n"
  else
    outfile = STDOUT
  end
  outfile.print headers.join("\t")+"\n" if opts.apistab
  JsonStreamer.new(inputf).each do |this|
    begin
      this["strict_consensus"]["class_name"]=this["strict_consensus"]["class"]
      this["relaxed_consensus"]["class_name"]=this["relaxed_consensus"]["class"]
      this = this.to_ostruct
      results = eval(query)
      if opts.apistab && results[-2].nil? && results[-1] != "NO_TREE"
        results[-2]=100
      end
      if results
        if output == "tab"
          results = [results] if results.class != "Array" && results.class != "Hash"
          outfile.print results.to_a.join("\t") + "\n"
        elsif output == "json"
          results = results.recurseToHash if results.class == OpenStruct
          outfile.print results.to_json_pp
        end
      end
    rescue
      STDERR << "Error interpreting query: " << query << $! << "\n"
      exit(1)
    end
  end
  inputf.close if inputf != STDIN
  outfile.close if outfile != STDOUT
end


