#!/usr/bin/env ruby

require 'Newick'
require 'optparse'
require 'ApisDB'
require 'csv'
require 'ostruct'

opt = OpenStruct.new

opt.all = false
opt.database = "phylodb"
opt.storage = "misc_apis"
opt.cog = false
opt.exp = false
opt.file = false
opt = ApisDB.loadOptions(opt)

o = OptionParser.new
o.banner << " dataset [dataset...]"
o.on("-a", "--all", "include all datasets in database (#{opt.all})") {opt.all = true}
o.on("-c", "--cog", "Use cog info") {opt.cog = true}
o.on("-d ", "--database ", String, 
     "query database (default #{opt.database})") {|d| opt.database = d}
o.on("-e ", "--expression ", String, "include datasets matching substring") {|t| opt.exp = t}
o.on("-f ", "--file ", String, "only include ids from file") {|t| opt.file = t}
o.on("-h ", "--host ", String, 
     "database host (default #{opt.host})") {|h| opt.host = h}
o.on("-s ", "--storage ", String, 
     "storage database (default #{opt.storage})") {|s| opt.storage = s}
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size < 1 && (!opt.all && !opt.exp))
  STDERR << o
  exit(1)
end


db = ApisDB.new(opt.host + "/" + opt.storage)

header = ["Sequence", "Dataset", "Kingdom", "Neighbor", "Bootstrap", "Distance"]
header += ["COG", "COG Definition"] if opt.cog

print header.to_csv

if (opt.all || opt.exp)
  repository(:default).adapter.select("select dataset from dataset").each do |dataset|
    ARGV.push(dataset) if (!opt.exp || dataset =~/#{opt.exp}/)
  end
end

inClause = ""

if (opt.file)
  inClause = "("
  STDERR << "Loading file of ids...\n"
  File.new(opt.file).each do |line|
    id, rest = line.chomp.split(/ |,/)
    inClause += "'" + id.quote + "',"
  end
  inClause.chop!
  inClause += ")"
end

datasets = "("
ARGV.each do |dataset|
  datasets += "'" + dataset.quote + "',"
end
datasets.chop!
datasets += ")"

query = "SELECT tree.seq_name, tree, tree.dataset, kingdom FROM tree, classification "
query += "WHERE tree.dataset IN #{datasets} AND tree.dataset = classification.dataset AND "
query += "tree.seq_name = classification.seq_name"
query += " AND classification.seq_name IN #{inClause}" if inClause != ""
db.query(query).each do |row|
  seq_name, tree, dataset, kingdom = row
  begin
    newick =  NewickTree.new(tree)
  rescue
    STDERR << "Cannot parse tree for #{seq_name}...\n"
    next
  end
  neighborNode = newick.findNode(newick.relatives(seq_name).first.first)
  queryNode = newick.findNode(seq_name)
  lca = queryNode.lca(neighborNode)
  dist = queryNode.distToAncestor(lca) + neighborNode.distToAncestor(lca)  
  row = [seq_name, dataset, kingdom, neighborNode.name, lca.name, dist]
  if (opt.cog)
    id, species = neighborNode.name.split("__")
    query = "SELECT cog, definition FROM phylodb_annotation.blast, phylodb_annotation.cog_proteins, "
    query += "phylodb_annotation.cog_definitions where target = 'cog' AND query = '#{id.quote}' "
    query += "AND hit=protein AND cog_proteins.cog = cog_definitions.cog"
    datum = db.get(query)
    if (datum.nil?)
      cog = ""
      definition = ""
    else
      cog, definition = row
    end
    row.push(cog, definition)
  end
  print row.to_csv
end
db.close
