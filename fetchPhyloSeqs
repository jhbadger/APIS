#!/usr/bin/env ruby

require 'PhyloDB'
require 'optparse'
require 'ostruct'
require 'bio'

opt = OpenStruct.new
opt.name = false
opt.species = false
opt.contig = false
opt.taxonomy = false
opt.dna = false
opt.rna = false
opt.molecule = false
opt.file = false
opt.form = false


o = OptionParser.new
o.banner << " id...id..."
o.on("-c", "--contig", "use contig as search id") {opt.contig = true}
o.on("-s", "--species", "use species as search id") {opt.species = true}  
o.on("-n", "--name", "use (exact) sequence name as search id") {opt.name = true}  
o.on("-g", "--form", "use contig form as search id") {opt.form = true}  
o.on("-t", "--taxonomy", "use taxonomy as search id") {opt.taxonomy = true}
o.on("-m", "--molecule", 
     "return full DNA molecules of contigs") {opt.molecule = true}  
o.on("-r", "--rRNA", "return rRNAs, not protein") {opt.rna = true}  
o.on("-u", "--transcripts", 
     "return coding transcripts, not proteins") {opt.dna = true}
o.on("-f ", "--file ", String, 
     "load IDs to search for from file") {|f| opt.file=f}  
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size <  1 && !opt.file)
  STDERR << o
  exit(1)
end

if (opt.file)
  ids = []
  File.new(opt.file).each do |line|
    ids.push(line.split(" ").first)
  end
else
  ids = ARGV
end

ActiveRecord::Base.establish_connection(:adapter  => 'mysql',
:host => 'mysql-lan-pro', :username=>'jbadger', :password=>'plankton',
:database=>'phylodb')

contig_names = []

ids.each do |id|
  if (opt.species)
    contig_names += Contig.find(:all, :select=>"name", :conditions=>"species LIKE '#{id}%'")
  elsif (opt.taxonomy)
    contig_names += Contig.find(:all, :select=>"name", :conditions=>"taxonomy LIKE '%#{id}%'")
  elsif (opt.form)
    contig_names += Contig.find(:all, :select=>"name", :conditions=>"form LIKE '%#{id}%'")
  end
end

if (opt.dna)
  Transcript.includes(:contig, :protein).find_each(:conditions=>{:contig_name => contig_names}) do |cdna|
    print cdna.to_fasta
  end
elsif (opt.rna)
  Rrna.includes(:contig).find_each(:conditions=>{:contig_name => contig_names}) do |rrna|
    print rrna.to_fasta
  end
elsif (opt.molecule)
  Contig.find_each(:conditions => {:name => contig_names}) do |contig|
    print contig.to_fasta
  end
elsif (opt.name)
  Protein.includes(:contig).find_each(:conditions =>{:name=>ids}) do |prot|
    print prot.to_fasta
  end
else
  Protein.includes(:contig).find_each(:conditions=>{:contig_name => contig_names}) do |prot|
    print prot.to_fasta
  end
end

