#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'rubygems'

# add current directory to load path
$LOAD_PATH.unshift(File.dirname($0))
require 'ApisDB'

opt = OpenStruct.new
opt.name = false
opt.species = false
opt.contig = false
opt.taxonomy = false
opt.dna = false
opt.rna = false
opt.molecule = false
opt.file = false
opt.form = false
opt.everything = false
opt.database = "phylodb"
ApisDB.loadOptions(opt)

o = OptionParser.new
o.banner << " id...id..."
o.on("-c", "--contig", "use contig as search id") {opt.contig = true}
o.on("-d ", "--database ", String, 
     "protein database to use (default #{opt.database})") {|d| opt.database = d}
o.on("-e", "--everything", 
     "return for all contigs") {opt.everything=true; ARGV.push("everything")}     
o.on("-s", "--species", "use species as search id") {opt.species = true}  
o.on("-n", "--name", "use (exact) sequence name as search id") {opt.name = true}  
o.on("-g", "--form", "use contig form as search id") {opt.form = true}
o.on("-h ", "--host ", String, "database host (default #{opt.host})") {|h| opt.host = h}  
o.on("-t", "--taxonomy", "use taxonomy as search id") {opt.taxonomy = true}
o.on("-m", "--molecule", 
     "return full DNA molecules of contigs") {opt.molecule = true}  
o.on("-r", "--rRNA", "return rRNAs, not protein") {opt.rna = true}  
o.on("-u", "--transcripts", 
     "return coding transcripts, not proteins") {opt.dna = true}
o.on("-f ", "--file ", String, 
     "load IDs to search for from file") {|f| opt.file=f}  
begin
  o.parse!
rescue
  STDERR << $!.message << "\n"
  STDERR << o
  exit(1)
end
if (ARGV.size <  1 && !opt.file && !opt.everything)
  STDERR << o
  exit(1)
end

if (opt.file)
  ids = []
  File.new(opt.file).each do |line|
    ids.push(line.split(" ").first)
  end
else
  ids = ARGV
end


db = ApisDB.new(opt.host + "/" + opt.database)

inList = "("
ids.each do |id|
  if (opt.species)
    query = "SELECT name FROM contigs WHERE species LIKE '%#{id.quote}%'"
  elsif (opt.taxonomy)
    query = "SELECT name FROM contigs WHERE taxonomy LIKE '%#{id.quote}%'"
  elsif (opt.form)
    query = "SELECT name FROM contigs WHERE form LIKE '%#{id.quote}%'"
  elsif (opt.contig)
    query = "SELECT name FROM contigs WHERE name LIKE '%#{id.quote}%'"
  elsif (opt.everything)
    query = "SELECT name FROM contigs"
  end
  if (!opt.name)
    db.query(query).each do |row|
      inList += "'" + row[0].quote + "',"
    end
  else
    inList += "'" + id.quote + "',"
  end
end
inList.chop!
inList += ")"

if (opt.dna)
  query = "SELECT proteins.name, transcripts.seq, annotation, species FROM proteins "
  query += "LEFT JOIN contigs on contigs.name = proteins.contig_name "
  query += "LEFT JOIN transcripts on transcripts.name = proteins.name "
  query += "WHERE proteins.contig_name IN #{inList}"
elsif (opt.rna)
  query = "SELECT rrnas.name, rrnas.seq, annotation, species FROM rrnas "
  query += "LEFT JOIN contigs on contigs.name = rrnas.contig_name "
  query += "WHERE rrnas.contig_name IN #{inList}"
elsif (opt.molecule)
  query = "SELECT name, seq, form, species FROM contigs "
  query += "WHERE name IN #{inList}"
elsif (opt.name)
  query = "SELECT proteins.name, proteins.seq, annotation, species FROM proteins "
  query += "LEFT JOIN contigs on contigs.name = proteins.contig_name "
  query += "WHERE proteins.name IN #{inList}"
else
  query = "SELECT proteins.name, proteins.seq, annotation, species FROM proteins "
  query += "LEFT JOIN contigs on contigs.name = proteins.contig_name "
  query += "WHERE proteins.contig_name IN #{inList}"
end

db.query(query).each do |row|
  seq_name, seq, ann, species = row
  print seq.to_fasta(seq_name + " " + ann + " " + "{" + species + "}")
end




